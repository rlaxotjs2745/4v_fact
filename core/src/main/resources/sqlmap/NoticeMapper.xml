<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.fact.core.model.NoticeMapper">

    <select id="getMainNoticeCount" resultType="int">
        SELECT COUNT(*) FROM TB_NOTICE  WHERE IS_MAIN_PAGE=1
    </select>

    <select id="getWebpageNoticeCount" resultType="int">
        SELECT COUNT(*) FROM TB_NOTICE  WHERE IS_SHOW=1 AND NOTICE_STATUS=1
    </select>

    <sql id="searchNoticeCondition">
        <if test='query != null and query != ""'>
            <choose>
                <when test='filter == null or filter == ""'>
                    AND SUBJECT LIKE '%' || #{query} || '%'
                </when>
                <when test='filter == "t"'>
                    AND SUBJECT LIKE '%' || #{query} || '%'
                </when>
                <when test='filter == "w"'>
                    AND AUTHOR LIKE '%' || #{query} || '%'
                </when>
                <when test='filter == "c"'>
                    AND NOTICE_CONTENTS LIKE '%' || #{query} || '%'
                </when>
                <when test='filter == "tc"'>
                    AND (SUBJECT LIKE '%' || #{query} || '%' OR NOTICE_CONTENTS LIKE '%' || #{query} || '%')
                </when>
                <otherwise>
                    AND SUBJECT LIKE '%' || #{query} || '%'
                </otherwise>
            </choose>
        </if>
    </sql>
    <select id="getOpenNoticeCount" resultType="int">
        SELECT COUNT(*) FROM TB_NOTICE
        WHERE IS_SHOW=1
            AND POSTING_START_DATE <![CDATA[<=]]> SYSDATE AND POSTING_END_DATE <![CDATA[>=]]> SYSDATE
            <include refid="searchNoticeCondition"></include>
    </select>

    <select id="getOpenNoticeList" parameterType="hashmap" resultType="kr.or.fact.core.model.DTO.NoticeVO">
        SELECT
            *
        FROM (
            SELECT
                ROW_NUMBER() OVER(ORDER by IDX_NOTICE DESC) AS row_num,
                IDX_NOTICE,
                NOTICE_CODE,
                NOTICE_NUM,
                SUBJECT,
                NOTICE_CONTENTS,
                IS_FILE,
                IS_NEW,
                IS_MAIN_PAGE,
                IS_IMPORTANT,
                IS_SHOW,
                VIEW_COUNT,
                NOTICE_STATUS,
                POSTING_START_DATE,
                POSTING_END_DATE,
                DOC_VERSION,
                MEMO,
                SEARCH_TAG,
                AUTHOR,
                IDX_ADMIN,
                CONFIRM_ADMIN_IDX,
                REG_DATE,
                LAST_UPD_DATE
            FROM TB_NOTICE
            WHERE IS_SHOW=1
                AND POSTING_START_DATE <![CDATA[<=]]> SYSDATE AND POSTING_END_DATE <![CDATA[>=]]> SYSDATE
                <include refid="searchNoticeCondition"></include>
        )
        WHERE row_num BETWEEN #{count} * (#{page} - 1) + 1 AND #{count} * #{page}
    </select>

    <select id="getNoticeWebList" parameterType="hashmap" resultType="kr.or.fact.core.model.DTO.NoticeVO">
        SELECT
            *
        FROM (
            SELECT
                ROW_NUMBER() OVER(ORDER by ${order_field} DESC) AS row_num,
                IDX_NOTICE,
                NOTICE_CODE,
                NOTICE_NUM,
                SUBJECT,
                NOTICE_CONTENTS,
                IS_FILE,
                IS_NEW,
                IS_MAIN_PAGE,
                IS_IMPORTANT,
                IS_SHOW,
                VIEW_COUNT,
                NOTICE_STATUS,
                POSTING_START_DATE,
                POSTING_END_DATE,
                DOC_VERSION,
                MEMO,
                SEARCH_TAG,
                AUTHOR,
                IDX_ADMIN,
                CONFIRM_ADMIN_IDX,
                REG_DATE,
                LAST_UPD_DATE
            FROM TB_NOTICE
            WHERE IS_SHOW=1
                AND NOTICE_STATUS=1
        )
        WHERE row_num BETWEEN #{amount} * (#{page_num} - 1) + 1 AND #{amount} * #{page_num}
    </select>

<insert id="insertNotice" parameterType="kr.or.fact.core.model.DTO.NoticeVO">
    INSERT INTO TB_NOTICE(
IDX_NOTICE,
NOTICE_CODE,
NOTICE_NUM,
SUBJECT,
NOTICE_CONTENTS,
IS_FILE,
IS_NEW,
IS_MAIN_PAGE,
IS_IMPORTANT,
IS_SHOW,
VIEW_COUNT,
NOTICE_STATUS,
POSTING_START_DATE,
POSTING_END_DATE,
DOC_VERSION,
MEMO,
SEARCH_TAG,
AUTHOR,
IDX_ADMIN,
CONFIRM_ADMIN_IDX,
REG_DATE,
LAST_UPD_DATE
    )VALUES (
                    SEQ_NOTICE.NEXTVAL,
                #{notice_code},
                #{notice_num},
                #{subject},
                #{notice_contents},
                #{is_file},
                #{is_new},
                #{is_main_page},
                #{is_important},
                1,
                #{view_count},
                1,
                #{posting_start_date},
                #{posting_end_date},
                1,
                #{memo},
                #{search_tag},
                #{author},
                #{idx_admin},
                #{confirm_admin_idx},
                SYSDATE,
                #{last_upd_date}
                )
</insert>


    <select id="getNoticeByIdx" parameterType="long" resultType="kr.or.fact.core.model.DTO.NoticeVO">
        SELECT *
        FROM TB_NOTICE WHERE IDX_NOTICE = #{idx_notice}
    </select>
    <select id="getMainNoticeList" parameterType="hashmap" resultType="kr.or.fact.core.model.DTO.NoticeVO">
        SELECT * FROM TB_NOTICE WHERE ROWNUM <![CDATA[<]]> 5 AND NOTICE_STATUS != 3 AND IS_SHOW = 1 AND IS_MAIN_PAGE = 1 ORDER BY POSTING_START_DATE DESC
    </select>


    <resultMap id="noticeDetailMap" type="kr.or.fact.core.model.DTO.NoticeVO">
        <id property="idx_notice" column="IDX_NOTICE" />
        <result property="is_file" column="IS_FILE" />
        <result property="is_main_page" column="IS_MAIN_PAGE" />
        <result property="is_important" column="IS_IMPORTANT" />
        <result property="notice_code" column="NOTICE_CODE" />
        <result property="notice_num" column="NOTICE_NUM" />
        <result property="subject" column="SUBJECT" />
        <result property="notice_contents" column="NOTICE_CONTENTS" />
        <result property="is_show" column="IS_SHOW" />
        <result property="view_count" column="VIEW_COUNT" />
        <result property="notice_status" column="NOTICE_STATUS" />
        <result property="posting_start_date" column="POSTING_START_DATE" />
        <result property="posting_end_date" column="POSTING_END_DATE" />
        <result property="doc_version" column="DOC_VERSION" />
        <result property="memo" column="MEMO" />
        <result property="search_tag" column="SEARCH_TAG" />
        <result property="author" column="AUTHOR" />
        <result property="idx_admin" column="IDX_ADMIN" />
        <result property="confirm_admin_idx" column="CONFIRM_ADMIN_IDX" />
        <result property="reg_date" column="REG_DATE" />
        <result property="last_upd_date" column="LAST_UPD_DATE" />

        <collection property="attachmentsUrl" ofType="String">
            <id property="attachmentsUrl" column="FILE_PATH" />
        </collection>
    </resultMap>
    <select id="getNoticeIsFile" resultMap="noticeDetailMap" resultType="kr.or.fact.core.model.DTO.NoticeVO">
        SELECT
            A.IDX_NOTICE,
            B.IDX_FILE_INFO,
            A.IS_FILE,
            A.IS_MAIN_PAGE,
            A.IS_IMPORTANT,
            A.NOTICE_CODE,
            A.NOTICE_NUM,
            A.SUBJECT,
            A.NOTICE_CONTENTS,
            A.IS_SHOW,
            A.VIEW_COUNT,
            A.NOTICE_STATUS,
            A.POSTING_START_DATE,
            A.POSTING_END_DATE,
            A.DOC_VERSION,
            A.MEMO,
            A.SEARCH_TAG,
            A.AUTHOR,
            A.IDX_ADMIN,
            A.CONFIRM_ADMIN_IDX,
            A.REG_DATE,
            A.LAST_UPD_DATE,
            C.FILE_PATH
        FROM TB_NOTICE A
        LEFT JOIN TB_NOTICE_FILE_JOIN B ON A.IDX_NOTICE = B.IDX_NOTICE
        LEFT JOIN TB_FILE_INFO C ON B.IDX_FILE_INFO = C.IDX_FILE_INFO
        WHERE A.IDX_NOTICE=#{idx_notice}
    </select>


    <delete id="deleteNotice" parameterType="int">
        DELETE FROM TB_NOTICE WHERE IDX_NOTICE = #{idx_notice}
    </delete>



    <insert id="insertNoticeFileJoin" parameterType="kr.or.fact.core.model.DTO.NoticeFileJoinVO">
        INSERT INTO TB_NOTICE_FILE_JOIN (
IDX_NOTICE_FILE_JOIN,
IDX_NOTICE,

IDX_FILE_INFO,

REG_DATE
        )VALUES (
                    SEQ_NOTICE_FILE_JOIN.NEXTVAL,
                    SEQ_NOTICE.CURRVAL,
                    SEQ_FILE_INFO.CURRVAL,

                    SYSDATE

                )
    </insert>

    <insert id="updateNoticeFileJoin" parameterType="kr.or.fact.core.model.DTO.NoticeFileJoinVO">
        INSERT INTO TB_NOTICE_FILE_JOIN (
            IDX_NOTICE_FILE_JOIN,
            IDX_NOTICE,

            IDX_FILE_INFO,

            REG_DATE
        )VALUES (
                    SEQ_NOTICE_FILE_JOIN.NEXTVAL,
                    #{idx_notice},
                    SEQ_FILE_INFO.CURRVAL,

                    SYSDATE

                )
    </insert>
<select id="getNoticeViewCount" parameterType="long" resultType="int">
    SELECT VIEW_COUNT FROM TB_NOTICE WHERE IDX_NOTICE=#{idx_notice}
</select>
    <update id="updateNoticeViewCount" parameterType="kr.or.fact.core.model.DTO.NoticeVO">
        UPDATE TB_NOTICE SET VIEW_COUNT = VIEW_COUNT + 1 WHERE IDX_NOTICE =#{idx_notice}
    </update>

    <update id="updateNotice" parameterType="kr.or.fact.core.model.DTO.NoticeVO">
        UPDATE TB_NOTICE
        SET NOTICE_CODE=#{notice_code},
            SUBJECT=#{subject},
            NOTICE_CONTENTS=#{notice_contents},
            IS_FILE=#{is_file},
            IS_NEW=#{is_new},
            IS_MAIN_PAGE=#{is_main_page},
            POSTING_START_DATE=#{posting_start_date},
            POSTING_END_DATE=#{posting_end_date},
            DOC_VERSION=DOC_VERSION + 1,
            MEMO=#{memo},
            LAST_UPD_DATE=SYSDATE
        WHERE IDX_NOTICE=#{idx_notice}

    </update>
</mapper>