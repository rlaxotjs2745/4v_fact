<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.fact.core.model.UserMapper">

    <select id="getUserInfoById" parameterType="String" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM TB_USER  WHERE user_id=#{user_id,jdbcType=VARCHAR}
    </select>

    <select id="getUserInfoByIdx" parameterType="long" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM TB_USER  WHERE IDX_USER=#{idx_user}
    </select>

    <select id="getAuthUser" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM TB_USER WHERE user_id=#{user_id} AND user_pw=#{user_pw}
    </select>

    <select id="getUserInfoByNameAndMPhoneNum" parameterType="hashmap" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM TB_USER WHERE USER_NAME=#{user_name} AND MPHONE_NUM=#{mphone_num}
    </select>

    <select id="getAllUserList" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM  TB_USER
    </select>

    <select id="getAllUserListCount" resultType="int">
        SELECT COUNT(*) FROM TB_USER
    </select>

    <select id="getUserSpecialInfoPagingList" parameterType="hashmap" resultType="kr.or.fact.core.model.DTO.PagedUserListVO">
        SELECT
               user_id
               ,user_name
               ,mphone_num
        FROM (
            SELECT ROW_NUMBER() OVER(ORDER by #{order_field} DESC) AS row_num
              ,user_id
              ,user_name
              ,mphone_num
            FROM TB_USER
            WHERE ROWNUM <![CDATA[<=]]> #{page_num}*#{amount}
        )
        WHERE row_num <![CDATA[>]]> (#{page_num} -1)*#{amount}
    </select>


    <select id="getUserPagingList" parameterType="kr.or.fact.core.model.DTO.ParamPageListFilteredVO" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT
                *
        FROM (
            SELECT ROW_NUMBER() OVER(ORDER by #{order_field} DESC) AS row_num
                t.*
            FROM (
                SELECT * FROM TB_USER
                    <if test="filter1 == 0">
                        WHERE USER_TYPE != 1
                    </if>
                    <if test="filter1 == 1">
                        WHERE USER_TYPE == 1
                    </if>
                     ) t
            WHERE ROWNUM <![CDATA[<=]]> #{page_num}*#{amount}
            )
        WHERE row_num <![CDATA[>]]> (#{page_num} -1)*#{amount}
    </select>

    <select id="getUserCount" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM  TB_USER
        <if test='user_type != 99'> WHERE USER_TYPE = #{user_type}</if>
    </select>

    <select id="getActiveUserTotalCount" resultType="int">
        SELECT COUNT(*) FROM  TB_USER
        WHERE USER_TYPE = 0
        <if test='sign_in_type != 100'>AND SIGN_IN_TYPE = #{sign_in_type}</if>
    </select>

    <select id="getDormantUserTotalCount" resultType="int">
        SELECT COUNT(*) FROM  TB_USER
        WHERE USER_TYPE != 0
        <if test='sign_in_type != 100'>AND SIGN_IN_TYPE = #{sign_in_type}</if>
    </select>

    <select id="selectList" parameterType="kr.or.fact.core.model.DTO.UserVO" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM (
                          SELECT t.*
                          FROM TB_USER t
                      ) WHERE ROWNUM <![CDATA[ <= ]]> 501
    </select>

    <insert id="insertUserInfo" parameterType="kr.or.fact.core.model.DTO.UserVO">
        INSERT INTO TB_USER (
            IDX_USER,
            USER_ID,
            USER_PW,
            USER_NAME,
            ADDR,
            TEL_NUM,
            MPHONE_NUM,
            EMAIL,
            USER_TYPE,
            BAN_MEMO,
            IS_SERVICE_AGREE,
            SERVICE_AGREE_VER,
            IS_PRIVACY_AGREE,
            PRIVACY_AGREE_VER,
            IS_THIRD_PARTY_AGREE,
            THIRD_PARTY_AGREE_VER,
            IS_MAKETING_AGREE,
            MAKETING_AGREE_VER,
            AUTH_STATUS,
            IS_APPLICANT,
            IS_CORPORATE_MEMBER,
            IDX_CORP_INFO,
            SIGN_IN_TYPE,
            REG_DATE,
            LAST_UPD_DATE
        ) VALUES (
             SEQ_USER.NEXTVAL,
             #{user_id},
             #{user_pw},
             #{user_name},
             #{addr},
             #{tel_num},
             #{mphone_num},
             #{email},
             #{user_type},
             #{ban_memo},
             #{is_service_agree},
             #{service_agree_ver},
             #{is_privacy_agree},
             #{privacy_agree_ver},
             #{is_third_party_agree},
             #{third_party_agree_ver},
             #{is_maketing_agree},
             #{maketing_agree_ver},
             #{auth_status},
             #{is_applicant},
             #{is_corporate_member},
             #{idx_corp_info},
             #{sign_in_type},
             SYSDATE,
             SYSDATE
        )
    </insert>


    <update id="updateUserInfo" parameterType="kr.or.fact.core.model.DTO.UserVO">
        UPDATE TB_USER
        SET
            USER_PW =  #{user_pw}
        WHERE USER_ID=#{user_id}

    </update>
    <update id="updateUserInfoForLogout" parameterType="string">
        UPDATE TB_USER
        SET
            LAST_UPD_DATE = SYSDATE
        WHERE USER_ID=#{user_id}
    </update>

    <delete id="deleteUserInfoByID" parameterType="string">
        DELETE TB_USER WHERE  USER_ID = #{user_id}
    </delete>

    <delete id="deleteDormantUser" parameterType="int">
        DELETE TB_USER WHERE IDX_USER = #{userIdx}
    </delete>

    <update id="deleteUserInfoByIdx">
        UPDATE TB_USER
        SET
            USER_TYPE = 2,
            BAN_MEMO = #{ban_memo}
        WHERE IDX_USER=#{idx_user}
    </update>


    <insert id="insertUserSecretCode" parameterType="kr.or.fact.core.model.DTO.UserSecretCodeVO">
        INSERT INTO TB_USER_SECRET_CODE (
            IDX_USER_SECRET_CODE,
            IDX_USER,
            SECRET_CODE_TYPE,
            SECRET_CODE,
            EXPIRE_DATE,
            IS_CONFIRM,
            IS_USE,
            REG_DATE
        ) VALUES (
                     SEQ_USER_SECRET_CODE.NEXTVAL,
                     #{idx_user},
                     #{secret_code_type},
                     #{secret_code},
                     #{expire_date},
                     #{is_confirm},
                     #{is_use},
                     SYSDATE
                 )
    </insert>

    <select id="getUserSecretCodeByIdx" parameterType="kr.or.fact.core.model.DTO.ParamUserNCodeVO" resultType="kr.or.fact.core.model.DTO.UserSecretCodeVO">

      SELECT A.IDX_USER_SECRET_CODE,
             A.IDX_USER,
             A.SECRET_CODE_TYPE,
             A.SECRET_CODE,
             A.EXPIRE_DATE,
             A.IS_CONFIRM,
             A.REG_DATE
      FROM TB_USER_SECRET_CODE A
        JOIN TB_USER B
        ON A.IDX_USER = B.IDX_USER AND B.IDX_USER=#{idx_user} AND A.IS_CONFIRM = 0 AND SECRET_CODE=#{secret_code} AND SYSDATE BETWEEN A.REG_DATE AND A.EXPIRE_DATE

    </select>

    <select id="getUserSecretCodeForPwUpdate" parameterType="kr.or.fact.core.model.DTO.ParamUserNCodeVO" resultType="kr.or.fact.core.model.DTO.UserSecretCodeVO">

        SELECT A.IDX_USER_SECRET_CODE,
               A.IDX_USER,
               A.SECRET_CODE_TYPE,
               A.SECRET_CODE,
               A.EXPIRE_DATE,
               A.IS_CONFIRM,
               A.REG_DATE
        FROM TB_USER_SECRET_CODE A
                 JOIN TB_USER B
                      ON A.IDX_USER = B.IDX_USER AND B.IDX_USER=#{idx_user} AND A.IS_USE = 0 AND SECRET_CODE=#{secret_code}

    </select>

    <update id="updateUserSecretCode" parameterType="kr.or.fact.core.model.DTO.UserSecretCodeVO">
        UPDATE TB_USER_SECRET_CODE SET
        IS_CONFIRM = #{is_confirm},
        IS_USE=#{is_use},
        EXPIRE_DATE=SYSDATE
        WHERE IDX_USER_SECRET_CODE = #{idx_user_secret_code}

    </update>

    <select id="selectUserbyPage" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM (
        SELECT A.*, FLOOR((ROWNUM - 1)/10 + 1) PAGE, (
        SELECT MAX(FLOOR((ROWNUM - 1)/10 + 1)) FROM TB_USER
        WHERE IDX_USER >= 1 AND USER_TYPE = 0
        <if test="!type.equals(100)">
            AND SIGN_IN_TYPE = #{type}
        </if>
        ) MAXVALUE FROM (
        SELECT TB_USER.* FROM TB_USER
        WHERE IDX_USER >= 1 AND USER_TYPE = 0
        <if test="!type.equals(100)">
            AND SIGN_IN_TYPE = #{type}
        </if>
        ORDER BY CONVERT(USER_NAME,'UTFE') ASC
        )
        A)
        WHERE PAGE = #{page}
    </select>

    <select id="selectDormantUserbyPage" resultType="kr.or.fact.core.model.DTO.UserVO">
        SELECT * FROM (
        SELECT A.*, FLOOR((ROWNUM - 1)/10 + 1) PAGE, (
        SELECT MAX(FLOOR((ROWNUM - 1)/10 + 1)) FROM TB_USER
        WHERE IDX_USER >= 1 AND USER_TYPE != 0
        <if test="!type.equals(100)">
            AND SIGN_IN_TYPE = #{type}
        </if>
        ) MAXVALUE FROM (
        SELECT TB_USER.* FROM TB_USER
        WHERE IDX_USER >= 1 AND USER_TYPE != 0
        <if test="!type.equals(100)">
            AND SIGN_IN_TYPE = #{type}
        </if>
        ORDER BY CONVERT(USER_NAME,'UTFE') ASC
        )
        A)
        WHERE PAGE = #{page}
    </select>

    <update id="modifyPw">
        UPDATE TB_USER
        SET
        USER_PW = #{hashedPassword}
        WHERE IDX_USER=#{idx_user}
    </update>

    <update id="updateUser" parameterType="kr.or.fact.core.model.DTO.UserVO">
        UPDATE TB_USER
        SET
            TEL_NUM = #{tel_num},
            MPHONE_NUM = #{mphone_num},
            ADDR = #{addr}
        WHERE IDX_USER= #{idx_user}
    </update>

</mapper>